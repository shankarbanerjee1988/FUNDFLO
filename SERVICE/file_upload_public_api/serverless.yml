service: ff-public-file-upload-service

provider:
  name: aws
  runtime: nodejs20.x
  stage: prod
  region: ap-south-1
  memorySize: 256
  timeout: 300
  environment:
    BUCKET_NAME: ff-public-file-upload-service-ap-south-1
    AUTH_SERVICE_URL: "https://ac-apis-dev.uat.fundflo.ai/v1/authentication"
    ALLOWED_MIME_TYPES: image/jpeg,image/png,text/jpg,application/pdf,text/plain
    MAX_FILE_SIZE: 12 # Max file size in MB
    MAX_FILES: 10 # Max number of files
    PRESIGNED_EXPIRY: 3600 # PRESIGNED EXPIRY 1 hr

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
        - "s3:ListBucket"
      Resource:
        - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*
        - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}

functions:
  uploadFiles:
    handler: handler.uploadFilesHandler
    events:
      - http:
          path: upload
          method: post
          cors: true
          binaryMediaTypes:
            - '*/*'
  readFiles:
    handler: handler.readFilesHandler
    events:
      - http:
          path: read
          method: get
          cors: true

resources:
  Resources:
    MyS3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          IgnorePublicAcls: false
          BlockPublicPolicy: false
          RestrictPublicBuckets: false
    MyS3BucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: ${self:provider.environment.BUCKET_NAME}
        PolicyDocument:
          Statement:
            - Effect: "Allow"
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*"

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3110
    lambdaPort: 3111